SamBring API specification

The SamBring API schema
 provides REST‑style endpoints that enable user authentication, drivers to view and update deliveries, and administrators to retrieve dashboard statistics. The API follows the OpenAPI 3.0 specification and requires one of three security mechanisms — session cookies (cookieAuth), HTTP Basic authentication (basicAuth) or an API key in the Authorization header (ApiKeyAuth)
test.sambring.no
. Unless otherwise noted, all endpoints below require the caller to be authenticated using one of these schemes.

Authentication endpoints
POST /api/auth/change-password/ – Change current user’s password

Purpose: Allows an authenticated user to change their password.

Request body: Accepts JSON, form‑encoded or multipart content matching the ChangePassword schema. The body must include the current password (old_password) and two copies of the new password (new_password1, new_password2)
test.sambring.no
.

Security: Requires authentication.

Response: On success, returns HTTP 200 with a JSON object containing a detail message
test.sambring.no
.

POST /api/auth/login/ – Log in with email and password

Purpose: Authenticates a user and returns user information.

Request body: Accepts the Login schema: an email (email) and password (password)
test.sambring.no
. Both fields are required.

Security: The request itself is unauthenticated, but the endpoint issues authentication credentials (cookie or token) on success.

Response: On success, returns HTTP 200 with a User object (see User schema below)
test.sambring.no
.

POST /api/auth/logout/ – Log out current user

Purpose: Invalidates the current session or API key.

Request body: None.

Security: Requires authentication.

Response: Returns HTTP 200 with a detail string confirming logout
test.sambring.no
.

POST /api/auth/signup/ – Create a new user account

Purpose: Creates a new user and optionally assigns a role.

Request body: Accepts the Signup schema, which requires an email (email) and two copies of the password (password1, password2). Optional fields include first_name, last_name, actor_id and role_id
test.sambring.no
.

Security: The endpoint is available to unauthenticated callers but still lists the security schemes in the schema. In practice it is used by unauthenticated clients to register.

Response: Returns HTTP 201 with a User object representing the newly created account
test.sambring.no
.

Driver endpoints
GET /api/driver/deliveries/ – Retrieve deliveries assigned to the authenticated driver

Purpose: Returns a list of upcoming or past deliveries assigned to the logged‑in driver.

Query parameters:

filter (string, optional) – accepts future or past
test.sambring.no
. If omitted, defaults to future deliveries. This allows clients to request upcoming deliveries or completed deliveries.

Security: Requires authentication.

Response: Returns HTTP 200 with an array of DriverDeliveryItem objects
test.sambring.no
. Each item contains details about the delivery (pickup/delivery dates, locations and actors), the associated packages and whether the delivery has been completed (see DriverDeliveryItem schema below).

GET /api/driver/profile/ – Fetch the authenticated driver’s profile

Purpose: Returns the driver profile associated with the current user.

Security: Requires authentication.

Response: Returns HTTP 200 with a Driver object containing the driver’s identifier, user information, vehicle information and other details (license number, phone, address, active status, start/end dates, status string and timestamps)
test.sambring.no
.

Package status endpoints
POST /api/packages/{package_id}/deliver/ – Mark a package as delivered

Purpose: Allows a driver to report that a package has been delivered.

Path parameter: package_id (integer) – the identifier of the package to update
test.sambring.no
.

Request body: Accepts a PackageDelivery object with fields:

delivered_to (string) – name of the person who received the package
test.sambring.no
.

delivery_notes (string) – optional notes up to 500 characters
test.sambring.no
.
The response schema (PackageDelivery) also includes success, message, new_status, new_status_display and delivered_at fields
test.sambring.no
.

Security: Requires authentication.

Responses:

200 OK – returns the updated PackageDelivery record
test.sambring.no
.

400 Bad Request – missing required fields
test.sambring.no
.

403 Forbidden – the driver is not assigned to the package or is not a driver
test.sambring.no
.

404 Not Found – package not found
test.sambring.no
.

500 Internal Server Error – unexpected server error
test.sambring.no
.

POST /api/packages/{package_id}/pickup/ – Mark a package as picked up

Purpose: Allows a driver to indicate that they have collected a package from the sender or pickup location.

Path parameter: package_id (integer) – the ID of the package
test.sambring.no
.

Request body: Accepts a PackageStatusUpdate object (application/json, form‑encoded or multipart) with fields:

success (boolean) – whether the operation succeeded
test.sambring.no
.

message (string) – explanatory message
test.sambring.no
.

new_status (string) – new internal status code
test.sambring.no
.

new_status_display (string) – human‑readable status display
test.sambring.no
.

picked_up_at (string) – timestamp when the package was picked up
test.sambring.no
.
All fields except picked_up_at are required
test.sambring.no
.

Security: Requires authentication.

Responses:

200 OK – returns a PackageStatusUpdate object with the same fields as above
test.sambring.no
.

400 Bad Request – invalid request
test.sambring.no
.

403 Forbidden – driver is not assigned to the package or is not a driver
test.sambring.no
.

404 Not Found – package not found
test.sambring.no
.

500 Internal Server Error – unexpected server error
test.sambring.no
.

Dashboard endpoint
GET /dashboard/api/user-signups/ – Retrieve sign‑up statistics

Purpose: Returns daily counts of user sign‑ups for administrative dashboards.

Security: Requires authentication.

Response: Returns HTTP 200 with an array of UserSignupStats objects
test.sambring.no
; each object contains a date (date) and the number of users who signed up on that date (count)
test.sambring.no
.

Schema summaries
User

A User represents an authenticated account. It includes an immutable id, the user’s email, username (letters, digits and @/./+/-/_ only), and optional first_name and last_name
test.sambring.no
. The username and id fields are required
test.sambring.no
.

DriverDeliveryItem

Returned by /api/driver/deliveries/, a DriverDeliveryItem contains:

type (string);

delivery – a Delivery object (pickup/delivery dates, locations and sender/receiver actors)
test.sambring.no
;

packages – list of Package objects
test.sambring.no
;

location (string), date (date) and time (time) of the delivery slot
test.sambring.no
;

actor – an Actor object representing the person at the pickup/delivery point
test.sambring.no
;

actor_type (string) indicating whether the actor is the sender or receiver
test.sambring.no
;

is_delivered (boolean), pickup_location (string), pickup_date/pickup_time (nullable date/time) and pickup_actor (Actor)
test.sambring.no
.

Package

A Package contains physical characteristics and status information: dimensions (length, width, height), weight (weight, weight_unit), dimension unit (dimension_unit), optional volume and temperature information, flags for fragile and hazardous, delivery status (delivery_status), timestamps when it was picked up and delivered, person it was delivered to, notes, and timestamps for creation/update
test.sambring.no
. Several enumerations specify allowed units: DimensionUnitEnum includes cm, m, in, ft
test.sambring.no
; WeightUnitEnum includes kg, g, lb, oz
test.sambring.no
; TemperatureUnitEnum is C or F
test.sambring.no
; DeliveryStatusEnum lists statuses such as unprocessed, ready_for_pickup, picked_up, in_transit, delivered and cancelled
test.sambring.no
.

PackageDelivery

Used by /api/packages/{package_id}/deliver/, this schema accepts delivered_to (string up to 255 characters) and delivery_notes (string up to 500 characters)
test.sambring.no
. Responses include additional fields: success (boolean), message (string), new_status, new_status_display and delivered_at timestamp
test.sambring.no
.

PackageStatusUpdate

Used by /api/packages/{package_id}/pickup/, this schema contains success, message, new_status, new_status_display (all required) and picked_up_at (timestamp of pickup)
test.sambring.no
.

Driver

The Driver object returned from /api/driver/profile/ includes the driver ID, the associated User and Vehicle objects, license number, phone number, address, active flag, employment dates (start_date, end_date), status string and timestamps
test.sambring.no
.

Vehicle

A Vehicle object contains information about the driver’s vehicle: make, model, color, license plate, type (e.g., car, van), capacity and weight limits, registration year, next inspection date and engine type
test.sambring.no
. The engine_type field uses the EngineTypeEnum enumeration (gasoline, diesel, electric, hybrid or other)
test.sambring.no
.

UserSignupStats

Used by the dashboard endpoint, UserSignupStats contains a date (YYYY‑MM‑DD) and a count of sign‑ups on that date
test.sambring.no
.

Authentication mechanisms

All protected endpoints list three security schemes. Clients can authenticate by sending:

Scheme	Location	Details
cookieAuth	Cookie	Send a sessionid cookie in the request
test.sambring.no
.
basicAuth	HTTP Basic	Send an Authorization: Basic header with base64‑encoded credentials
test.sambring.no
.
ApiKeyAuth	Header	Send an API key in the Authorization header
test.sambring.no
.